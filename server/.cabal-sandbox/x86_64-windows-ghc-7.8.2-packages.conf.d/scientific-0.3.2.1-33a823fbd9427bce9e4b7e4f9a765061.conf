name: scientific
version: 0.3.2.1
id: scientific-0.3.2.1-33a823fbd9427bce9e4b7e4f9a765061
license: BSD3
copyright:
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
stability:
homepage: https://github.com/basvandijk/scientific
package-url:
synopsis: Numbers represented using scientific notation
description: @Data.Scientific@ provides a space efficient and arbitrary precision
             scientific number type.
             .
             'Scientific' numbers are represented using
             <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>. It
             uses a coefficient @c :: 'Integer'@ and a base-10 exponent @e :: 'Int'@ (do
             note that since we're using an 'Int' to represent the exponent these numbers
             aren't truly arbitrary precision). A scientific number corresponds to the
             'Fractional' number: @'fromInteger' c * 10 '^^' e@.
             .
             The main application of 'Scientific' is to be used as the target of parsing
             arbitrary precision numbers coming from an untrusted source. The advantages
             over using 'Rational' for this are that:
             .
             * A 'Scientific' is more efficient to construct. Rational numbers need to be
             constructed using '%' which has to compute the 'gcd' of the 'numerator' and
             'denominator'.
             .
             * 'Scientific' is safe against numbers with huge exponents. For example:
             @1e1000000000 :: 'Rational'@ will fill up all space and crash your
             program. Scientific works as expected:
             .
             > > read "1e1000000000" :: Scientific
             > 1.0e1000000000
             .
             * Also, the space usage of converting scientific numbers with huge exponents to
             @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
             will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules: Data.Scientific Data.Text.Lazy.Builder.Scientific
                 Data.ByteString.Builder.Scientific
hidden-modules: Math.NumberTheory.Logarithms
trusted: False
import-dirs: C:\Users\Zach\Documents\GitHub\RTS\server\.cabal-sandbox\x86_64-windows-ghc-7.8.2\scientific-0.3.2.1
library-dirs: C:\Users\Zach\Documents\GitHub\RTS\server\.cabal-sandbox\x86_64-windows-ghc-7.8.2\scientific-0.3.2.1
hs-libraries: HSscientific-0.3.2.1
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.5.0.0-5fe7a390b500f28a53017664fa71efb6
         base-4.7.0.0-8c321579defcd947118e0b797769014f
         bytestring-0.10.4.0-9d2e2b57864a5564ee5f34df70cf6652
         deepseq-1.3.0.2-22a6f6c7fecfba6151bd1c8d190bff9c
         ghc-prim-0.3.1.0-682421719c31a5603cae8ba0f22c29ef
         hashable-1.2.2.0-8d366f201a61a4628230d54be1f186a6
         integer-gmp-0.5.1.0-dc47f6b546fc171f67a7f7d311684a99
         text-1.1.1.3-0daa5891cbbcb44765890d75fd91488c
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: C:\Users\Zach\Documents\GitHub\RTS\server\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.2\scientific-0.3.2.1\html\scientific.haddock
haddock-html: C:\Users\Zach\Documents\GitHub\RTS\server\.cabal-sandbox\doc\x86_64-windows-ghc-7.8.2\scientific-0.3.2.1\html
